# ??
# 1.???? ??
server.port = 8080

# 2. JPA ?? ??
    # 1. DB URL
spring.datasource.driverClassName =com.mysql.cj.jdbc.Driver
# spring.datasource.driverClassName = DBMS ???? ??[? ???? ??]
spring.datasource.url =jdbc:mysql://localhost:3306/springweb
# spring.datasource.url = ??? ?????? ??
    # 2. DB USER
spring.datasource.username=root
# spring.datasource.username =???
    # 3. DB PASSWORD [ ????? ?? ?? ??. ]
spring.datasource.password=1234
# spring.datasource.username =DB?? ????

# [ ?? ?? ]
spring.jpa.hibernate.ddl-auto = create
#spring.jpa.hibernate.ddl-auto = update

# JPA? SQL? ??? SQL?? CONSOLE ? ????
# 1. sql? console ????
spring.jpa.properties.hibernate.show_sql=true
# 2. sql ??? ?? ?? ??
spring.jpa.properties.hibernate.format_sql=true

# spring view conroller ----> react build file[js]
spring.mvc.pathmatch.matching-strategy = ant_path_matcher


# 1. ?? ???? ????? ??? oauth ????? ??
# 1. ??? ?? ????? id ??
# spring.security.oauth2.client.registration.google.client-id =??? ????? id
spring.security.oauth2.client.registration.google.client-id =93366344541-mvn5p57eiod7hsrphnldu6j4aolspd08.apps.googleusercontent.com
# 2. ??? ?? ????? pw ??
spring.security.oauth2.client.registration.google.client-secret =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
# 3. ???? ??? ????[??? ?????] : ??? ????? ??? ??/??? ??
spring.security.oauth2.client.registration.google.scope = email,profile

# 2. ??? ????? ?? ??? ??? ??? ??
# spring.security.oauth2.client.registration.kakao.client-id = REST API ?
spring.security.oauth2.client.registration.kakao.client-id =7dc37d88ec2a5f582f8261fb80980d3c
# spring.security.oauth2.client.registration.kakao.client-secret = ?? ?
spring.security.oauth2.client.registration.kakao.client-secret =LhSZMFn6kNK2DGxpFCtOO9Y9dQpLStkI
# 3. ???? ??? ????[??? ?????] : ??? ????? ??? ??/??? ??
spring.security.oauth2.client.registration.kakao.client-scope =profile_nickname,account_email
# ?? ??1
# 1. ????? ?? ???
spring.security.oauth2.client.registration.kakao.client-name =kakao
# 2. ?? ?? ??? HTTP ??? ??
spring.security.oauth2.client.registration.kakao.client-authentication-method =post
# 3. ??? redirect-uri
spring.security.oauth2.client.registration.kakao.redirect-uri ={baseUrl}/{action}/oauth2/code/{registrationId}
# 4. ?? ??? JSON ?? [ ?? ]
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
# ?? ??2
# 1. ???? ??? ???? uri
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
# 2. ?? ?? ??? ???? uri
spring.security.oauth2.client.provider.kakao.token-uri =https://kauth.kakao.com/oauth/token
# 3. ????? ??? ???? [ ????,???? ??] ??? ???? uri
spring.security.oauth2.client.provider.kakao.user-info-uri =https://kapi.kakao.com/v2/user/me
# 4. ??? ???? ?? ? JSON ??[?] = ?????? ??? ??? ???? ? ??
spring.security.oauth2.client.provider.kakao.user-name-attribute=kakao_account


# 3. ??? ????? ?? ??? ??? ??? ??
spring.security.oauth2.client.registration.naver.client-id =ZiyCyM98xpX2tYPstd66
spring.security.oauth2.client.registration.naver.client-secret =YxqLXGnJRR
spring.security.oauth2.client.registration.naver.client-scope =nickname,email

spring.security.oauth2.client.registration.naver.client-name =naver
#spring.security.oauth2.client.registration.naver.client-authentication-method =post
spring.security.oauth2.client.registration.naver.redirect-uri ={baseUrl}/{action}/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri =https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri =https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response
